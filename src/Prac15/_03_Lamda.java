package Prac15;

//Day16
public class _03_Lamda {

  public static void main(String[] args) {
    //람다식 : 간결한 형태의 코드 뭉치
    // (전달값 1, 전달값 2 -> { 코드 }
  }

  // <1> 기본 형태 : 뭔가를 출력하는 함수
  /*
  public void print() {
    String s = "test";
    System.out.println(s);
  }
   */

  // 이걸 람다식으로 바꾸는 연습
  // 1. 람다식은 public과 메서드 명이 필요가 없다(지움)
  // 2. 람다식에서는 무언가 리턴 타입이 필요한 부분이 있다면 자동으로 지정해주므로 void 삭제
  // 3. 전달값과 메서드 바디 사이에 화살표로 연결 필요
  // 지금까지 하면 print 메서드를 람다식으로 바꾸는 것 완성
  // 그런데 빨간 줄이 나타나는 이유는 이게 지금 바로 람다를 사용할 수 없기 때문(지금은 형태만 본다.
    /*
  위 식과 비교해보면
  접근제어자, 반환타입, 메서드명은 사라지고
  파라미터 받는 부분과 메서드 바디는 남아있고, 화살표가 생긴 모습을 확인할 수 있다.
     */
   /*
     () -> {
    String s = "test";
    System.out.println(s);
  }
   */

  //<2> 문자열 하나를 전달값으로 받는 메서드를 람다식으로 만들기.
  /*
  public void print(String s) {
    System.out.println(s);
  }
   */
  // 일단 위의 형태처럼 1, 2, 3은 똑같다.
  // 4. 그리고 메서드 바디가 한 줄만 있으면 위로 올리고(중괄호 옆으로)
  // 5. 중괄호를 지울 수 있다.
  // 6. 또한 바디 끝나는 시점의 ; 도 지운다.
  // 7. 전달되는 자료형이 String이라는 건 컴파일러가 미리 알고 있다. 그러므로 지운다.
  // 8. 그리고 전달값이 한 개다, 그럼 그걸 감싸고 있는 괄호도 지워도 된다.
  /*
   s -> System.out.println(s)
  */

  //<3> 전달값이 두 개, 반환값이 있는 메서드 람다식 변환하기
  /*
  public int add(int x, int y) {
     return x+y;
   }
   */

  // 맨 처음처럼 1, 2 삭제
  // 3. 소괄호와 중괄호 -> 로 연결
  // 4. 파라미터 안의 자료형도 컴파일러가 알 수 있기 때문에 int 삭제
  // 5. 한 줄로 되게 줄을 올림
  //** return이 포함된 경우는 중괄호 삭제 불가능하다!
  // 6. 만약 리턴을 제외해버린다면, 중괄호 삭제 가능, 세미콜론 삭제 가능
 /*
  (x, y) -> x + y;
  */

}
